package main

import (
	"bufio"
	"bytes"
	"fmt"
	"go/format"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"

	"golang.org/x/text/unicode/rangetable"
)

type prop struct {
	filename    string
	packagename string
}

func main() {
	props := []prop{
		{"WordBreakProperty.txt", "words"},
		{"GraphemeBreakProperty.txt", "graphemes"},
		{"emoji-data.txt", "emoji"},
	}

	for _, prop := range props {
		err := generate(prop)
		if err != nil {
			panic(err)
		}
	}
}

func generate(prop prop) error {
	file, err := os.Open("gen/" + prop.filename)
	if err != nil {
		return err
	}
	b := bufio.NewReader(file)

	runesByCategory := map[string][]rune{}
	for {
		s, err := b.ReadString('\n')
		if err != nil {
			if err == io.EOF {
				break
			}
			return err
		}

		if len(s) == 0 {
			continue
		}

		if s[0] == '\n' || s[0] == '#' {
			continue
		}

		parts := strings.Split(s, ";")
		runes, err := getRuneRange(parts[0])
		if err != nil {
			return err
		}

		split2 := strings.Split(parts[1], "#")
		category := strings.TrimSpace(split2[0])

		runesByCategory[category] = append(runesByCategory[category], runes...)
	}

	rangeTables := map[string]*unicode.RangeTable{}
	for category, runes := range runesByCategory {
		rangeTables[category] = rangetable.New(runes...)
	}

	if prop.packagename == "words" {
		// Special case for underscore; it's not in the spec but we allow it mid-word
		// It's commonly used in handles and usernames, we choose to interpret as a single token
		// Some programming languages allow it for formatting numbers
		rangeTables["MidNumLet"] = rangetable.Merge(rangeTables["MidNumLet"], rangetable.New('_'))

		// Merged "macro" tables defined here: https://unicode.org/reports/tr29/#WB_Rule_Macros
		rangeTables["AHLetter"] = rangetable.Merge(rangeTables["ALetter"], rangeTables["Hebrew_Letter"])
		rangeTables["MidNumLetQ"] = rangetable.Merge(rangeTables["MidNumLet"], rangetable.New('\''))
	}

	err = write(prop, rangeTables)
	if err != nil {
		return err
	}

	return nil
}

func getRuneRange(s string) ([]rune, error) {
	s = strings.TrimSpace(s)
	hilo := strings.Split(s, "..")
	lo64, err := strconv.ParseInt("0x"+hilo[0], 0, 32)
	if err != nil {
		return nil, err
	}

	lo := rune(lo64)
	runes := []rune{lo}

	if len(hilo) == 1 {
		return runes, nil
	}

	hi64, err := strconv.ParseInt("0x"+hilo[1], 0, 32)
	if err != nil {
		return nil, err
	}

	hi := rune(hi64)
	if hi == lo {
		return runes, nil
	}

	// Skip first, inclusive of last
	for r := lo + 1; r <= hi; r++ {
		runes = append(runes, r)
	}

	return runes, nil
}

func write(prop prop, rts map[string]*unicode.RangeTable) error {
	buf := &bytes.Buffer{}

	_, err := buf.WriteString("// generated by github.com/clipperhouse/uax29\n\n")
	if err != nil {
		return err
	}

	_, err = buf.WriteString("package " + prop.packagename + "\n\n")
	if err != nil {
		return err
	}

	_, err = buf.WriteString("import \"unicode\"\n\n")
	if err != nil {
		return err
	}

	// Keep the write order stable
	categories := make([]string, 0, len(rts))
	for category := range rts {
		categories = append(categories, category)
	}
	sort.Strings(categories)

	for _, category := range categories {
		rt := rts[category]
		fmt.Fprintf(buf, "var %s = %#v\n\n", category, rt)
	}

	// Break up some lines for readability;
	// Better to create a custom printer for RangeTable, but meh for now
	source := buf.String()
	source = strings.ReplaceAll(source, "R16:", "\n\tR16:")
	source = strings.ReplaceAll(source, "[]unicode.Range16{", "[]unicode.Range16{\n\t")
	source = strings.ReplaceAll(source, ", unicode.Range16{", ",\n\tunicode.Range16{")
	source = strings.ReplaceAll(source, "\tunicode.Range16{", "\t\t{")
	source = strings.ReplaceAll(source, "}},", "},\n\t},")
	source = strings.ReplaceAll(source, "R32:", "\n\tR32:")
	source = strings.ReplaceAll(source, "[]unicode.Range32{", "[]unicode.Range32{\n\t")
	source = strings.ReplaceAll(source, ", unicode.Range32{", ",\n\tunicode.Range32{")
	source = strings.ReplaceAll(source, "\tunicode.Range32{", "\t\t{")
	source = strings.ReplaceAll(source, ", LatinOffset:0}", ",\n\tLatinOffset:0,\n}")
	source = strings.ReplaceAll(source, ", LatinOffset:1}", ",\n\tLatinOffset:1,\n}")
	source = strings.ReplaceAll(source, "Lo:", "")
	source = strings.ReplaceAll(source, "Hi:", "")
	source = strings.ReplaceAll(source, "Stride:", "")

	formatted, err := format.Source([]byte(source))
	if err != nil {
		return err
	}

	dst, err := os.Create(prop.packagename + "/tables.go")
	if err != nil {
		return err
	}
	defer dst.Close()

	_, err = dst.Write(formatted)
	if err != nil {
		return err
	}

	return nil
}
